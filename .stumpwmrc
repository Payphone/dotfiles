;; Zenburn Colors
(setf *colors* '("#4d4d4d"
                 "#cc9393"
                 "#60b48a"
                 "#f0dfaf"
                 "#506070"
                 "#dc8cc3"
                 "#8cd0d3"
                 "#dcdccc"))
(update-color-map (current-screen))

(set-win-bg-color "#3f3f3f")
(set-bg-color "#3f3f3f")
(set-fg-color "#dcdccc")
(set-border-color "#4d4d4d")
(setf *window-border-style* :Thin)
(set-focus-color "#dcdccc")
(set-unfocus-color "#4d4d4d")
(set-font "-lucy-tewi-medium-*-*-*-11-*-*-*-*-*-*-*")

;; Commands

(defcommand urxvt () ()
  "Start an urxvt instance or switch to it, if it is already running."
  (run-shell-command "urxvt"))

(defcommand weather () ()
  "Displays AnsiWeather."
  (message (run-shell-command "ansiweather -a false -l Wasilla -u imperial -p false" t)))

;; Surf

(defcommand surf (address) ((:string "URL: "))
  "Opens surf to the specified address."
  (run-shell-command (format nil "surf -g -b -p ~A" address)))

(defcommand surf-search (search) ((:string "Search: "))
  "Searches the specified search engine."
  (surf (run-shell-command (format nil "surfraw -browser=echo ~A ~A" "duckduckgo" search) t)))

;; PwSafe

(defcommand password (account password) ((:string "Account: ") (:password "Password: "))
  "Copies password for the specified account to the clipboard."
  (run-shell-command (format nil "echo '~A' | pwsafe -p ~A" password account))
  (message "Copied to clipboard."))

(defcommand username (account password) ((:string "Account: ") (:password "Password: "))
  "Copies password for the specified account to the clipboard."
  (run-shell-command (format nil "echo '~A' | pwsafe -u ~A" password account))
  (message "Copied to clipboard."))

;; Calendar

(defcommand calendar () ()
  "Displays a calendar for the current month, and any events associated with the
  current day."
  (message "~A~%~A" (run-shell-command "cal" t) (run-shell-command "calendar -A 7" t)))

;; Mail

(defun list-directory (folder)
  "Returns a list of files in the directory."
  (directory
   (make-pathname :type :wild :name :wild
                  :directory (pathname-directory folder))))

(defcommand mail () ()
  "Displays the number of new emails."
  (let ((emails (length (list-directory #P"~/Maildir/new/"))))
    (message "~A new email(s)." (if (> emails 0) emails "No"))))

;; Swank Server
(require :swank)
(swank-loader:init)
(swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t)

;; Keybindings

(define-key *root-map* (kbd "c") "urxvt")
(define-key *root-map* (kbd "e") "exec emacsclient -c")
(define-key *root-map* (kbd "C-w") "weather")
(define-key *root-map* (kbd "P") "password")
(define-key *root-map* (kbd "U") "username")
(define-key *root-map* (kbd "C-c") "calendar")
(define-key *root-map* (kbd "M") "mail")

(define-key *root-map* (kbd "C-s") "surf-search")

(load-module "stumpd")
(use-package :stumpd)
(define-key *root-map* (kbd "m") 'stumpd:*mpd-playback-map*)

(load-module "dictionary")

(define-key *root-map* (kbd "d") "get-definition")
